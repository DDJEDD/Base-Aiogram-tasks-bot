from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from database.db import get_async_session
from database.module import User, Task


async def get_user(tg_id, session:AsyncSession):
    #–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ id. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—å—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ë–î
    response = await session.execute(select(User).where(User.tg_id == tg_id))
    user = response.scalars().first()
    return user
async def send_tasks_list(user, target, state: FSMContext):
    #–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —é–∑–µ—Ä–∞
    async with get_async_session() as session:
        result = await session.execute(select(Task).where(Task.user_id == user.id))
        tasks_list = result.scalars().all()

    if not tasks_list:
        await target.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!" if isinstance(target, types.Message) else "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!", show_alert=True)
        await state.clear()
        return

    buttons = [
        [InlineKeyboardButton(text=f"{'‚úÖ' if task.completed else '‚ùå'} {task.title}",
                              callback_data=f"task_{task.id}")]
        for task in tasks_list
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    if isinstance(target, types.Message):
        await target.answer(f"–í—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}:", reply_markup=keyboard)
    else:
        await target.message.edit_text(f"–í—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}:", reply_markup=keyboard)

    await state.clear()
async def show_task_menu(message: types.Message, task_id: int, state: FSMContext):
    #–û–ø—Ü–∏–∏ –∑–∞–¥–∞—á–∏
    await state.update_data(selected_task_id=task_id)

    async with get_async_session() as session:
        task = await session.get(Task, task_id)
        if not task:
            await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        status_btn_text = "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π" if task.completed else "‚ùå –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"

    buttons = [
        [InlineKeyboardButton(text=status_btn_text, callback_data="toggle_task_status")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete_task")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_tasks")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.edit_text("–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π?", reply_markup=keyboard)

